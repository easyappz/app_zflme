openapi: 3.0.0
info:
  title: Campus Navigator API
  version: 1.1.0
  description: API for campuses, buildings, rooms, search and indoor navigation.
servers:
  - url: /api
paths:
  /status:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: ok
                timestamp: 2025-01-01T00:00:00.000Z
                uptime: 12.34
  /campuses:
    get:
      summary: List campuses
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
      responses:
        '200':
          description: Campus list
          content:
            application/json:
              schema:
                type: object
                properties:
                  page: { type: integer }
                  limit: { type: integer }
                  total: { type: integer }
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        _id: { type: string }
                        name: { type: string }
                        code: { type: string }
                        center:
                          type: array
                          items: { type: number }
              example:
                page: 1
                limit: 20
                total: 1
                items:
                  - _id: "661111111111111111111111"
                    name: "Main Campus"
                    code: "MC"
                    center: [37.617, 55.755]
        '500':
          description: Error listing campuses
          content:
            application/json:
              example:
                error: ListCampusesError
                message: Detailed error message
                details: { }
  /campuses/{id}:
    get:
      summary: Get campus by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Campus
          content:
            application/json:
              example:
                _id: "661111111111111111111111"
                name: "Main Campus"
                code: "MC"
                center: [37.617, 55.755]
        '404':
          description: Not found
          content:
            application/json:
              example:
                error: NotFound
                message: "Campus 123 not found"
                details: { id: "123" }
        '500':
          description: Error
          content:
            application/json:
              example:
                error: GetCampusError
                message: Detailed error message
                details: { id: "123" }
  /buildings:
    get:
      summary: List buildings
      parameters:
        - in: query
          name: campusId
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
      responses:
        '200':
          description: Building list
          content:
            application/json:
              example:
                page: 1
                limit: 20
                total: 2
                items:
                  - _id: "662222222222222222222222"
                    campusId: "661111111111111111111111"
                    name: "Science Center"
                    code: "SC"
                    center: [37.617, 55.755]
                  - _id: "662222222222222222222223"
                    campusId: "661111111111111111111111"
                    name: "Library"
                    code: "LB"
                    center: [37.618, 55.756]
        '500':
          description: Error listing buildings
          content:
            application/json:
              example:
                error: ListBuildingsError
                message: Detailed error message
                details: { }
  /buildings/{id}:
    get:
      summary: Get building by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Building
          content:
            application/json:
              example:
                _id: "662222222222222222222222"
                campusId: "661111111111111111111111"
                name: "Science Center"
                code: "SC"
                center: [37.617, 55.755]
        '404':
          description: Not found
          content:
            application/json:
              example:
                error: NotFound
                message: "Building 123 not found"
                details: { id: "123" }
        '500':
          description: Error
          content:
            application/json:
              example:
                error: GetBuildingError
                message: Detailed error message
                details: { id: "123" }
  /buildings/{id}/floors:
    get:
      summary: Get floors of a building
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Floors
          content:
            application/json:
              example:
                buildingId: "662222222222222222222222"
                floors: [0, 1, 2, 3]
        '500':
          description: Error
          content:
            application/json:
              example:
                error: GetBuildingFloorsError
                message: Detailed error message
                details: { id: "123" }
  /buildings/{id}/floor-plans:
    get:
      summary: Get floor plans metadata for a building
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Floor plans list
          content:
            application/json:
              example:
                buildingId: "662222222222222222222222"
                items:
                  - { level: 0, planImageUrl: "https://cdn.example.com/plans/SC_0.png" }
                  - { level: 1, planImageUrl: "https://cdn.example.com/plans/SC_1.png" }
        '500':
          description: Error
          content:
            application/json:
              example:
                error: GetBuildingFloorPlansError
                message: Detailed error message
                details: { id: "123" }
  /buildings/{id}/rooms:
    get:
      summary: Get rooms for a building
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: floor
          schema: { type: integer }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
      responses:
        '200':
          description: Rooms list
          content:
            application/json:
              example:
                page: 1
                limit: 20
                total: 2
                items:
                  - _id: "663333333333333333333331"
                    buildingId: "662222222222222222222222"
                    name: "Lecture Hall"
                    number: "101"
                    floor: 1
                    point: [37.6171, 55.7551]
                  - _id: "663333333333333333333332"
                    buildingId: "662222222222222222222222"
                    name: "Lab"
                    number: "102"
                    floor: 1
                    point: [37.6172, 55.7552]
        '500':
          description: Error
          content:
            application/json:
              example:
                error: GetBuildingRoomsError
                message: Detailed error message
                details: { id: "123" }
  /rooms:
    get:
      summary: List rooms with filters
      parameters:
        - in: query
          name: buildingId
          schema: { type: string }
        - in: query
          name: floor
          schema: { type: integer }
        - in: query
          name: query
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
      responses:
        '200':
          description: Rooms list
          content:
            application/json:
              example:
                page: 1
                limit: 20
                total: 1
                items:
                  - _id: "663333333333333333333333"
                    buildingId: "662222222222222222222222"
                    name: "Room"
                    number: "201"
                    floor: 2
                    point: [37.618, 55.756]
        '500':
          description: Error
          content:
            application/json:
              example:
                error: ListRoomsError
                message: Detailed error message
                details: { }
  /search:
    get:
      summary: Unified search across campuses, buildings, rooms
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: campusId
          schema: { type: string }
        - in: query
          name: buildingId
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20, maximum: 100 }
      responses:
        '200':
          description: Search results
          content:
            application/json:
              example:
                query: "lib"
                campuses:
                  - { id: "661111111111111111111111", type: "campus", title: "Main Campus", subtitle: "MC", center: [37.61, 55.75] }
                buildings:
                  - { id: "662222222222222222222223", type: "building", campusId: "661111111111111111111111", title: "Library", subtitle: "LB", center: [37.62, 55.76] }
                rooms:
                  - { id: "663333333333333333333334", type: "room", buildingId: "662222222222222222222223", title: "Reading Room", subtitle: "#301", floor: 3, point: [37.62, 55.76] }
        '500':
          description: Error
          content:
            application/json:
              example:
                error: SearchError
                message: Detailed error message
                details: { }
  /search/suggest:
    get:
      summary: Suggestions for buildings and rooms (autocomplete)
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 10, maximum: 50 }
      responses:
        '200':
          description: Suggest list
          content:
            application/json:
              example:
                query: "lib"
                items:
                  - { type: "building", id: "662222222222222222222223", title: "Library", subtitle: "LB", center: [37.62, 55.76] }
                  - { type: "room", id: "663333333333333333333334", buildingId: "662222222222222222222223", title: "Reading Room", subtitle: "#301", floor: 3, point: [37.62, 55.76] }
        '500':
          description: Error
          content:
            application/json:
              example:
                error: SuggestError
                message: Detailed error message
                details: { }
  /navigation/route:
    post:
      summary: Build a route inside a building using Dijkstra algorithm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                buildingId: { type: string }
                from:
                  type: object
                  properties:
                    roomId: { type: string }
                    point:
                      type: array
                      items: { type: number }
                to:
                  type: object
                  properties:
                    roomId: { type: string }
                    point:
                      type: array
                      items: { type: number }
              required: [buildingId, from, to]
            example:
              buildingId: "662222222222222222222222"
              from: { roomId: "663333333333333333333331" }
              to: { point: [37.6175, 55.7555] }
      responses:
        '200':
          description: Route result
          content:
            application/json:
              schema:
                type: object
                properties:
                  distance: { type: number }
                  steps:
                    type: array
                    items:
                      type: object
                      properties:
                        floor: { type: integer }
                        from:
                          type: array
                          items: { type: number }
                        to:
                          type: array
                          items: { type: number }
                        segmentDistance: { type: number }
                  geometry:
                    type: array
                    items:
                      type: array
                      items: { type: number }
              example:
                distance: 42.3
                steps:
                  - { floor: 1, from: [37.6171, 55.7551], to: [37.6172, 55.7552], segmentDistance: 10.5 }
                  - { floor: 1, from: [37.6172, 55.7552], to: [37.6175, 55.7555], segmentDistance: 31.8 }
                geometry:
                  - [37.6171, 55.7551]
                  - [37.6172, 55.7552]
                  - [37.6175, 55.7555]
        '400':
          description: Validation error
          content:
            application/json:
              example:
                error: ValidationError
                message: "buildingId is required"
                details: { body: { } }
        '404':
          description: Route not found or data missing
          content:
            application/json:
              examples:
                BuildingMissing:
                  summary: Building not found
                  value:
                    error: NotFound
                    message: "Building 123 not found"
                    details: { buildingId: "123" }
                NoPath:
                  summary: No path found
                  value:
                    error: RouteNotFound
                    message: "No path could be found between points"
                    details: { startId: "...", endId: "...", reason: "..." }
        '500':
          description: Server error
          content:
            application/json:
              example:
                error: BuildRouteError
                message: Detailed error message
                details: { }
components: { }
